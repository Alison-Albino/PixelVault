{"file_contents":{"replit.md":{"content":"# Overview\n\nPixelVault is a client-side encrypted password, note, and file manager built with a retro pixel art aesthetic. The application functions as a secure digital vault that stores passwords, notes, and files locally in the browser using client-side encryption. It features a master password system for authentication and uses a retro 8-bit gaming visual style with pixel art elements, reminiscent of classic arcade games.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Pure Web Technologies**: Built entirely with vanilla HTML, CSS, and JavaScript without any frameworks or libraries\n- **Single Page Application (SPA)**: Uses screen-based navigation with JavaScript to show/hide different sections\n- **Component-Based Structure**: Organized around distinct functional areas (login, main dashboard, entry management)\n- **Event-Driven Architecture**: Relies on DOM event listeners to handle user interactions and form submissions\n\n## Data Management\n- **Client-Side Storage**: Uses localStorage for persistent data storage in the browser\n- **Encryption Strategy**: Implements client-side encryption/decryption of all sensitive data using the master password\n- **No Backend Dependencies**: Completely self-contained application that runs entirely in the browser\n- **Entry Types Support**: Designed to handle three distinct data types: passwords, notes, and files\n\n## Security Model\n- **Master Password Authentication**: Single password protects access to the entire vault\n- **Client-Side Encryption**: All data is encrypted before storage and decrypted only when needed\n- **First-Time Setup**: Includes setup flow for new users to create their master password\n- **Local-Only Storage**: No data transmission to external servers, maintaining complete privacy\n\n## User Interface Design\n- **Pixel Art Aesthetic**: Implements retro 8-bit gaming visual style throughout the application\n- **Custom CSS Framework**: Hand-crafted pixel art styling with custom color palette and fonts\n- **Press Start 2P Font**: Uses Google Fonts integration for authentic retro typography\n- **Responsive Pixel Design**: Maintains pixel art styling across different screen sizes\n- **Modal-Based Interactions**: Uses overlay screens for detailed views and editing\n\n## File Management\n- **Base64 Encoding**: Converts uploaded files to Base64 format for local storage\n- **Media Viewer**: Built-in viewer for images and videos with pixel art styling\n- **File Type Support**: Handles multiple file formats including JPG, PNG, and MP4\n- **Secure File Storage**: Files are encrypted along with other vault data\n\n# External Dependencies\n\n## Third-Party Services\n- **Google Fonts**: Integrates Press Start 2P font for authentic retro typography\n- **No Other External APIs**: Application is designed to work completely offline\n\n## Browser APIs\n- **localStorage**: For persistent data storage in the browser\n- **File API**: For handling file uploads and reading file contents\n- **Crypto API**: For client-side encryption and decryption operations\n- **DOM API**: For dynamic content manipulation and event handling\n\n## Development Dependencies\n- **None**: Pure vanilla web technologies with no build process or package managers required\n- **Browser Compatibility**: Designed to work with modern web browsers that support ES6+ features","size_bytes":3384},"script.js":{"content":"// PixelVault - Retro Password Manager\n// Client-side encrypted password, note, and file manager\n\nclass PixelVault {\n    constructor() {\n        this.masterPassword = null;\n        this.entries = [];\n        this.currentEditingId = null;\n        this.currentFilter = 'all';\n        this.currentTheme = localStorage.getItem('vault-theme') || 'dark';\n        this.initializeApp();\n    }\n\n    // Initialize the application\n    initializeApp() {\n        this.setupEventListeners();\n        this.checkFirstTimeUser();\n        this.initializeTheme();\n    }\n\n    // Initialize theme\n    initializeTheme() {\n        document.body.setAttribute('data-theme', this.currentTheme);\n        this.updateThemeToggle();\n    }\n\n    // Update theme toggle button\n    updateThemeToggle() {\n        const toggle = document.getElementById('theme-toggle');\n        if (toggle) {\n            toggle.textContent = this.currentTheme === 'dark' ? '‚òÄ' : 'üåô';\n            toggle.title = this.currentTheme === 'dark' ? 'Modo Claro' : 'Modo Escuro';\n        }\n    }\n\n    // Check if this is a first-time user\n    checkFirstTimeUser() {\n        const hashedPassword = localStorage.getItem('vault_master');\n        if (!hashedPassword) {\n            // First time user - show setup option\n            document.getElementById('show-setup').style.display = 'block';\n        } else {\n            // Existing user - hide setup option\n            document.getElementById('show-setup').style.display = 'none';\n        }\n    }\n\n    // Setup all event listeners\n    setupEventListeners() {\n        // Login form\n        document.getElementById('login-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.handleLogin();\n        });\n\n        // Setup form\n        document.getElementById('setup-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.handleSetup();\n        });\n\n        // Show/hide setup form\n        document.getElementById('show-setup').addEventListener('click', () => {\n            this.toggleSetupForm();\n        });\n\n        // Navigation buttons\n        document.getElementById('add-password').addEventListener('click', () => {\n            this.showAddModal('password');\n        });\n\n        document.getElementById('add-note').addEventListener('click', () => {\n            this.showAddModal('note');\n        });\n\n        document.getElementById('add-file').addEventListener('click', () => {\n            this.showAddModal('file');\n        });\n\n        document.getElementById('logout').addEventListener('click', () => {\n            this.logout();\n        });\n\n        // Modal controls\n        document.getElementById('close-modal').addEventListener('click', () => {\n            this.hideModal('add-modal');\n        });\n\n        document.getElementById('close-view-modal').addEventListener('click', () => {\n            this.hideModal('view-modal');\n        });\n\n        document.getElementById('close-media-modal').addEventListener('click', () => {\n            this.hideModal('media-modal');\n        });\n\n        // Entry forms\n        document.getElementById('password-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.savePasswordEntry();\n        });\n\n        document.getElementById('note-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.saveNoteEntry();\n        });\n\n        document.getElementById('file-form').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.saveFileEntry();\n        });\n\n        // Password generator\n        document.getElementById('generate-password').addEventListener('click', () => {\n            this.generatePassword();\n        });\n\n        // Password visibility toggle\n        document.getElementById('toggle-password').addEventListener('click', () => {\n            this.togglePasswordVisibility('password');\n        });\n\n        // Theme toggle\n        document.getElementById('theme-toggle').addEventListener('click', () => {\n            this.toggleTheme();\n        });\n\n        // Filter buttons\n        document.getElementById('filter-all').addEventListener('click', () => {\n            this.setFilter('all');\n        });\n        document.getElementById('filter-password').addEventListener('click', () => {\n            this.setFilter('password');\n        });\n        document.getElementById('filter-note').addEventListener('click', () => {\n            this.setFilter('note');\n        });\n        document.getElementById('filter-file').addEventListener('click', () => {\n            this.setFilter('file');\n        });\n\n        // File input preview\n        document.getElementById('file-input').addEventListener('change', (e) => {\n            this.previewFile(e.target.files[0]);\n        });\n\n        // Entry actions\n        document.getElementById('edit-entry').addEventListener('click', () => {\n            this.editCurrentEntry();\n        });\n\n        document.getElementById('delete-entry').addEventListener('click', () => {\n            this.deleteCurrentEntry();\n        });\n\n        // Click outside modal to close\n        window.addEventListener('click', (e) => {\n            if (e.target.classList.contains('modal')) {\n                e.target.classList.remove('active');\n            }\n        });\n    }\n\n    // Toggle setup form visibility\n    toggleSetupForm() {\n        const setupDiv = document.getElementById('first-time-setup');\n        const showButton = document.getElementById('show-setup');\n        \n        if (setupDiv.classList.contains('hidden')) {\n            setupDiv.classList.remove('hidden');\n            showButton.textContent = 'HIDE SETUP';\n        } else {\n            setupDiv.classList.add('hidden');\n            showButton.textContent = 'FIRST TIME USER?';\n        }\n    }\n\n    // Handle user login\n    async handleLogin() {\n        const password = document.getElementById('master-password').value;\n        const storedHash = localStorage.getItem('vault_master');\n\n        if (!storedHash) {\n            this.showMessage('Nenhuma senha mestra definida. Use a configura√ß√£o inicial.', 'error');\n            return;\n        }\n\n        // Verify password by comparing hashes\n        const passwordHash = CryptoJS.SHA256(password).toString();\n        if (passwordHash !== storedHash) {\n            this.showMessage('Senha mestra incorreta!', 'error');\n            return;\n        }\n\n        this.masterPassword = password;\n        await this.loadEntries();\n        this.showMainScreen();\n        this.showMessage('Login realizado com sucesso!', 'success');\n    }\n\n    // Handle first-time setup\n    async handleSetup() {\n        const newPassword = document.getElementById('new-password').value;\n        const confirmPassword = document.getElementById('confirm-password').value;\n\n        if (newPassword !== confirmPassword) {\n            this.showMessage('As senhas n√£o coincidem!', 'error');\n            return;\n        }\n\n        if (newPassword.length < 6) {\n            this.showMessage('A senha deve ter pelo menos 6 caracteres!', 'error');\n            return;\n        }\n\n        // Hash and store master password\n        const passwordHash = CryptoJS.SHA256(newPassword).toString();\n        localStorage.setItem('vault_master', passwordHash);\n\n        this.masterPassword = newPassword;\n        this.entries = [];\n        this.saveEntries();\n        \n        this.showMainScreen();\n        this.showMessage('Cofre criado com sucesso!', 'success');\n    }\n\n    // Show main screen after successful login\n    showMainScreen() {\n        document.getElementById('login-screen').classList.remove('active');\n        document.getElementById('main-screen').classList.add('active');\n        this.renderEntries();\n    }\n\n    // Load entries from localStorage and decrypt them\n    async loadEntries() {\n        try {\n            const encryptedData = localStorage.getItem('vault_entries');\n            if (!encryptedData) {\n                this.entries = [];\n                return;\n            }\n\n            // Decrypt the entries using master password\n            const decryptedBytes = CryptoJS.AES.decrypt(encryptedData, this.masterPassword);\n            const decryptedData = decryptedBytes.toString(CryptoJS.enc.Utf8);\n            \n            if (!decryptedData) {\n                throw new Error('Failed to decrypt data');\n            }\n\n            this.entries = JSON.parse(decryptedData);\n        } catch (error) {\n            console.error('Error loading entries:', error);\n            this.showMessage('Error loading data. Password may be incorrect.', 'error');\n            this.entries = [];\n        }\n    }\n\n    // Save entries to localStorage with encryption\n    saveEntries() {\n        try {\n            const dataToEncrypt = JSON.stringify(this.entries);\n            const encrypted = CryptoJS.AES.encrypt(dataToEncrypt, this.masterPassword).toString();\n            localStorage.setItem('vault_entries', encrypted);\n        } catch (error) {\n            console.error('Error saving entries:', error);\n            this.showMessage('Error saving data!', 'error');\n        }\n    }\n\n    // Show add entry modal\n    showAddModal(type) {\n        // Hide all forms first\n        document.querySelectorAll('.entry-form').forEach(form => {\n            form.classList.add('hidden');\n        });\n\n        // Show the correct form\n        document.getElementById(`${type}-form`).classList.remove('hidden');\n        \n        // Update modal title\n        const titles = {\n            password: 'ADD PASSWORD',\n            note: 'ADD NOTE',\n            file: 'ADD FILE'\n        };\n        document.getElementById('modal-title').textContent = titles[type];\n\n        // Reset forms\n        this.resetForms();\n\n        // Show modal\n        document.getElementById('add-modal').classList.add('active');\n    }\n\n    // Reset all forms\n    resetForms() {\n        document.querySelectorAll('.entry-form').forEach(form => {\n            form.reset();\n        });\n        document.getElementById('file-preview').classList.add('hidden');\n        this.currentEditingId = null;\n    }\n\n    // Hide modal\n    hideModal(modalId) {\n        document.getElementById(modalId).classList.remove('active');\n        this.resetForms();\n    }\n\n    // Toggle theme\n    toggleTheme() {\n        this.currentTheme = this.currentTheme === 'dark' ? 'light' : 'dark';\n        document.body.setAttribute('data-theme', this.currentTheme);\n        localStorage.setItem('vault-theme', this.currentTheme);\n        this.updateThemeToggle();\n        this.showMessage(`Tema ${this.currentTheme === 'dark' ? 'escuro' : 'claro'} ativado`, 'info');\n    }\n\n    // Set filter\n    setFilter(filter) {\n        this.currentFilter = filter;\n        \n        // Update active filter button\n        document.querySelectorAll('.filter-button').forEach(btn => {\n            btn.classList.remove('active');\n        });\n        document.getElementById(`filter-${filter}`).classList.add('active');\n        \n        this.renderEntries();\n    }\n\n    // Toggle password visibility\n    togglePasswordVisibility(inputId) {\n        const input = document.getElementById(inputId);\n        const button = document.getElementById('toggle-password');\n        \n        if (input.type === 'password') {\n            input.type = 'text';\n            button.textContent = 'üôà';\n        } else {\n            input.type = 'password';\n            button.textContent = 'üëÅ';\n        }\n    }\n\n    // Copy to clipboard\n    async copyToClipboard(text, label = 'Texto') {\n        try {\n            await navigator.clipboard.writeText(text);\n            this.showMessage(`${label} copiado para a √°rea de transfer√™ncia!`, 'success');\n        } catch (err) {\n            // Fallback for older browsers\n            const textArea = document.createElement('textarea');\n            textArea.value = text;\n            document.body.appendChild(textArea);\n            textArea.select();\n            document.execCommand('copy');\n            document.body.removeChild(textArea);\n            this.showMessage(`${label} copiado para a √°rea de transfer√™ncia!`, 'success');\n        }\n    }\n\n    // Download media file\n    downloadMedia(entry) {\n        try {\n            const link = document.createElement('a');\n            link.href = entry.fileData;\n            link.download = entry.fileName;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            this.showMessage(`${entry.fileName} baixado!`, 'success');\n        } catch (err) {\n            console.error('Download error:', err);\n            this.showMessage('Erro ao baixar arquivo!', 'error');\n        }\n    }\n\n    // Save password entry\n    savePasswordEntry() {\n        const entry = {\n            id: this.currentEditingId || this.generateId(),\n            type: 'password',\n            serviceName: document.getElementById('service-name').value,\n            username: document.getElementById('username').value,\n            password: document.getElementById('password').value,\n            url: document.getElementById('url').value,\n            category: document.getElementById('password-category').value,\n            createdAt: this.currentEditingId ? this.getEntryById(this.currentEditingId).createdAt : new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n\n        this.saveEntry(entry);\n        this.showMessage(`Senha ${this.currentEditingId ? 'atualizada' : 'salva'} com sucesso!`, 'success');\n    }\n\n    // Save note entry\n    saveNoteEntry() {\n        const entry = {\n            id: this.currentEditingId || this.generateId(),\n            type: 'note',\n            title: document.getElementById('note-title').value,\n            content: document.getElementById('note-content').value,\n            category: document.getElementById('note-category').value,\n            createdAt: this.currentEditingId ? this.getEntryById(this.currentEditingId).createdAt : new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n\n        this.saveEntry(entry);\n        this.showMessage(`Nota ${this.currentEditingId ? 'atualizada' : 'salva'} com sucesso!`, 'success');\n    }\n\n    // Save file entry\n    async saveFileEntry() {\n        const fileInput = document.getElementById('file-input');\n        const file = fileInput.files[0];\n        \n        if (!file) {\n            this.showMessage('Por favor, selecione um arquivo!', 'error');\n            return;\n        }\n\n        try {\n            // Convert file to base64\n            const base64Data = await this.fileToBase64(file);\n            \n            const entry = {\n                id: this.currentEditingId || this.generateId(),\n                type: 'file',\n                title: document.getElementById('file-title').value,\n                fileName: file.name,\n                fileType: file.type,\n                fileSize: file.size,\n                fileData: base64Data,\n                category: document.getElementById('file-category').value,\n                createdAt: this.currentEditingId ? this.getEntryById(this.currentEditingId).createdAt : new Date().toISOString(),\n                updatedAt: new Date().toISOString()\n            };\n\n            this.saveEntry(entry);\n            this.showMessage(`Arquivo ${this.currentEditingId ? 'atualizado' : 'salvo'} com sucesso!`, 'success');\n        } catch (error) {\n            console.error('Error saving file:', error);\n            this.showMessage('Erro ao salvar arquivo!', 'error');\n        }\n    }\n\n    // Convert file to base64\n    fileToBase64(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => resolve(reader.result);\n            reader.onerror = error => reject(error);\n        });\n    }\n\n    // Save or update entry\n    saveEntry(entry) {\n        if (this.currentEditingId) {\n            // Update existing entry\n            const index = this.entries.findIndex(e => e.id === this.currentEditingId);\n            if (index !== -1) {\n                this.entries[index] = entry;\n            }\n        } else {\n            // Add new entry\n            this.entries.push(entry);\n        }\n\n        this.saveEntries();\n        this.renderEntries();\n        this.hideModal('add-modal');\n        this.hideModal('view-modal');\n    }\n\n    // Generate unique ID\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n\n    // Get entry by ID\n    getEntryById(id) {\n        return this.entries.find(entry => entry.id === id);\n    }\n\n    // Generate secure password\n    generatePassword() {\n        const length = 16;\n        const charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?\";\n        let password = \"\";\n        \n        for (let i = 0; i < length; i++) {\n            password += charset.charAt(Math.floor(Math.random() * charset.length));\n        }\n        \n        document.getElementById('password').value = password;\n        this.showMessage('Senha forte gerada!', 'info');\n    }\n\n    // Preview uploaded file\n    previewFile(file) {\n        const preview = document.getElementById('file-preview');\n        \n        if (!file) {\n            preview.classList.add('hidden');\n            return;\n        }\n\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            let previewElement;\n            \n            if (file.type.startsWith('image/')) {\n                previewElement = document.createElement('img');\n                previewElement.src = e.target.result;\n                previewElement.alt = file.name;\n            } else if (file.type.startsWith('video/')) {\n                previewElement = document.createElement('video');\n                previewElement.src = e.target.result;\n                previewElement.controls = true;\n            } else {\n                previewElement = document.createElement('div');\n                previewElement.textContent = `File: ${file.name} (${this.formatFileSize(file.size)})`;\n                previewElement.style.padding = '10px';\n                previewElement.style.border = '2px solid var(--border-color)';\n            }\n\n            preview.innerHTML = '';\n            preview.appendChild(previewElement);\n            preview.classList.remove('hidden');\n        };\n\n        reader.readAsDataURL(file);\n    }\n\n    // Format file size\n    formatFileSize(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    // Render entries list\n    renderEntries() {\n        const entriesList = document.getElementById('entries-list');\n        \n        // Filter entries based on current filter\n        let filteredEntries = this.entries;\n        if (this.currentFilter !== 'all') {\n            filteredEntries = this.entries.filter(entry => entry.type === this.currentFilter);\n        }\n        \n        if (filteredEntries.length === 0) {\n            entriesList.innerHTML = `\n                <div class=\"empty-state\">\n                    <p>${this.currentFilter !== 'all' ? 'NENHUMA ENTRADA NESTA CATEGORIA' : 'NENHUMA ENTRADA AINDA'}</p>\n                    <p>USE OS BOT√ïES ACIMA PARA ADICIONAR DADOS</p>\n                </div>\n            `;\n            return;\n        }\n\n        entriesList.innerHTML = filteredEntries.map(entry => {\n            let preview = '';\n            switch (entry.type) {\n                case 'password':\n                    preview = `${entry.category || 'Other'} ‚Ä¢ ${entry.serviceName}`;\n                    break;\n                case 'note':\n                    preview = `${entry.category || 'Other'} ‚Ä¢ ${entry.content.substring(0, 40)}${entry.content.length > 40 ? '...' : ''}`;\n                    break;\n                case 'file':\n                    preview = `${entry.category || 'Other'} ‚Ä¢ ${entry.fileName} (${this.formatFileSize(entry.fileSize)})`;\n                    break;\n            }\n\n            return `\n                <div class=\"entry-card ${entry.type}\" onclick=\"app.viewEntry('${entry.id}')\">\n                    <div class=\"entry-header\">\n                        <div class=\"entry-type ${entry.type}\">${entry.type.toUpperCase()}</div>\n                    </div>\n                    <div class=\"entry-title\">${this.getEntryTitle(entry)}</div>\n                    <div class=\"entry-preview\">${preview}</div>\n                </div>\n            `;\n        }).join('');\n    }\n\n    // Get entry title based on type\n    getEntryTitle(entry) {\n        switch (entry.type) {\n            case 'password':\n                return entry.serviceName;\n            case 'note':\n                return entry.title;\n            case 'file':\n                return entry.title;\n            default:\n                return 'Unknown';\n        }\n    }\n\n    // View entry details\n    viewEntry(id) {\n        const entry = this.getEntryById(id);\n        if (!entry) return;\n\n        this.currentEditingId = id;\n        const modalBody = document.getElementById('view-modal-body');\n        const modalTitle = document.getElementById('view-modal-title');\n\n        const typeTranslations = {\n            password: 'SENHA',\n            note: 'NOTA',\n            file: 'ARQUIVO'\n        };\n        modalTitle.textContent = `VER ${typeTranslations[entry.type] || entry.type.toUpperCase()}`;\n\n        let detailsHtml = '';\n        \n        switch (entry.type) {\n            case 'password':\n                const passwordId = `password-${id}`;\n                detailsHtml = `\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">CATEGORIA:</div>\n                        <div class=\"entry-detail-value\">${entry.category || 'Outro'}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.category || 'Outro'}', 'Categoria')\">üìã</button>\n                        </div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">SERVI√áO:</div>\n                        <div class=\"entry-detail-value\">${entry.serviceName}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.serviceName}', 'Servi√ßo')\">üìã</button>\n                        </div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">USU√ÅRIO:</div>\n                        <div class=\"entry-detail-value\">${entry.username}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.username}', 'Usu√°rio')\">üìã</button>\n                        </div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">SENHA:</div>\n                        <div class=\"entry-detail-value password\">\n                            <span id=\"${passwordId}\" class=\"password-text\" style=\"display: none;\">${entry.password}</span>\n                            <span id=\"${passwordId}-hidden\" class=\"password-hidden\">‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢</span>\n                            <button class=\"password-visibility-toggle pixel-button secondary\" onclick=\"app.togglePasswordInView('${passwordId}')\">üëÅ</button>\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.password}', 'Senha')\">üìã</button>\n                        </div>\n                    </div>\n                    ${entry.url ? `\n                        <div class=\"entry-detail\">\n                            <div class=\"entry-detail-label\">URL:</div>\n                            <div class=\"entry-detail-value\">\n                                <a href=\"${entry.url}\" target=\"_blank\" style=\"color: var(--primary-color)\">${entry.url}</a>\n                                <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.url}', 'URL')\">üìã</button>\n                            </div>\n                        </div>\n                    ` : ''}\n                `;\n                break;\n\n            case 'note':\n                detailsHtml = `\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">CATEGORIA:</div>\n                        <div class=\"entry-detail-value\">${entry.category || 'Outro'}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.category || 'Outro'}', 'Categoria')\">üìã</button>\n                        </div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">T√çTULO:</div>\n                        <div class=\"entry-detail-value\">${entry.title}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.title}', 'T√≠tulo')\">üìã</button>\n                        </div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">CONTE√öDO:</div>\n                        <div class=\"entry-detail-value\">${entry.content}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.content}', 'Conte√∫do')\">üìã</button>\n                        </div>\n                    </div>\n                `;\n                break;\n\n            case 'file':\n                const isImage = entry.fileType.startsWith('image/');\n                const isVideo = entry.fileType.startsWith('video/');\n                \n                detailsHtml = `\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">CATEGORIA:</div>\n                        <div class=\"entry-detail-value\">${entry.category || 'Outro'}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.category || 'Outro'}', 'Categoria')\">üìã</button>\n                        </div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">T√çTULO:</div>\n                        <div class=\"entry-detail-value\">${entry.title}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.title}', 'T√≠tulo')\">üìã</button>\n                        </div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">NOME DO ARQUIVO:</div>\n                        <div class=\"entry-detail-value\">${entry.fileName}\n                            <button class=\"copy-button pixel-button secondary\" onclick=\"app.copyToClipboard('${entry.fileName}', 'Nome do Arquivo')\">üìã</button>\n                        </div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">TAMANHO:</div>\n                        <div class=\"entry-detail-value\">${this.formatFileSize(entry.fileSize)}</div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">TIPO:</div>\n                        <div class=\"entry-detail-value\">${entry.fileType}</div>\n                    </div>\n                    <div class=\"entry-detail\">\n                        <div class=\"entry-detail-label\">A√á√ïES:</div>\n                        <div class=\"entry-detail-value\">\n                            ${(isImage || isVideo) ? `<button class=\"pixel-button primary\" onclick=\"app.showMediaViewer('${entry.id}')\">VER M√çDIA</button>` : ''}\n                            <button class=\"pixel-button warning\" onclick=\"app.downloadMedia(app.getEntryById('${entry.id}'))\">BAIXAR</button>\n                        </div>\n                    </div>\n                `;\n                break;\n        }\n\n        detailsHtml += `\n            <div class=\"entry-detail\">\n                <div class=\"entry-detail-label\">CRIADO:</div>\n                <div class=\"entry-detail-value\">${new Date(entry.createdAt).toLocaleString()}</div>\n            </div>\n            <div class=\"entry-detail\">\n                <div class=\"entry-detail-label\">ATUALIZADO:</div>\n                <div class=\"entry-detail-value\">${new Date(entry.updatedAt).toLocaleString()}</div>\n            </div>\n        `;\n\n        modalBody.innerHTML = detailsHtml;\n        document.getElementById('view-modal').classList.add('active');\n    }\n\n    // Toggle password visibility in view modal\n    togglePasswordInView(passwordId) {\n        const passwordText = document.getElementById(passwordId);\n        const passwordHidden = document.getElementById(passwordId + '-hidden');\n        const button = event.target;\n        \n        if (passwordText.style.display === 'none') {\n            passwordText.style.display = 'inline';\n            passwordHidden.style.display = 'none';\n            button.textContent = 'üôà';\n        } else {\n            passwordText.style.display = 'none';\n            passwordHidden.style.display = 'inline';\n            button.textContent = 'üëÅ';\n        }\n    }\n\n    // Show media viewer\n    showMediaViewer(id) {\n        const entry = this.getEntryById(id);\n        if (!entry || entry.type !== 'file') return;\n\n        const mediaContainer = document.getElementById('media-container');\n        let mediaElement;\n\n        if (entry.fileType.startsWith('image/')) {\n            mediaElement = document.createElement('img');\n            mediaElement.src = entry.fileData;\n            mediaElement.alt = entry.fileName;\n        } else if (entry.fileType.startsWith('video/')) {\n            mediaElement = document.createElement('video');\n            mediaElement.src = entry.fileData;\n            mediaElement.controls = true;\n        }\n\n        mediaContainer.innerHTML = '';\n        if (mediaElement) {\n            mediaContainer.appendChild(mediaElement);\n        }\n\n        document.getElementById('media-modal').classList.add('active');\n    }\n\n    // Edit current entry\n    editCurrentEntry() {\n        const entry = this.getEntryById(this.currentEditingId);\n        if (!entry) return;\n\n        this.hideModal('view-modal');\n\n        // Hide all forms first\n        document.querySelectorAll('.entry-form').forEach(form => {\n            form.classList.add('hidden');\n        });\n\n        // Show the correct form and populate it\n        const form = document.getElementById(`${entry.type}-form`);\n        form.classList.remove('hidden');\n\n        // Update modal title\n        const titles = {\n            password: 'EDITAR SENHA',\n            note: 'EDITAR NOTA',\n            file: 'EDITAR ARQUIVO'\n        };\n        document.getElementById('modal-title').textContent = titles[entry.type];\n\n        // Populate form fields based on entry type\n        switch (entry.type) {\n            case 'password':\n                document.getElementById('service-name').value = entry.serviceName;\n                document.getElementById('password-category').value = entry.category || 'Other';\n                document.getElementById('username').value = entry.username;\n                document.getElementById('password').value = entry.password;\n                document.getElementById('url').value = entry.url || '';\n                break;\n\n            case 'note':\n                document.getElementById('note-title').value = entry.title;\n                document.getElementById('note-category').value = entry.category || 'Other';\n                document.getElementById('note-content').value = entry.content;\n                break;\n\n            case 'file':\n                document.getElementById('file-title').value = entry.title;\n                document.getElementById('file-category').value = entry.category || 'Other';\n                // Note: We can't set file input value for security reasons\n                // Show current file info instead\n                const preview = document.getElementById('file-preview');\n                preview.innerHTML = `\n                    <div>Arquivo atual: ${entry.fileName} (${this.formatFileSize(entry.fileSize)})</div>\n                    <div style=\"font-size: 8px; color: var(--secondary-color); margin-top: 5px;\">\n                        Selecione um novo arquivo para substituir, ou deixe vazio para manter o arquivo atual\n                    </div>\n                `;\n                preview.classList.remove('hidden');\n                break;\n        }\n\n        document.getElementById('add-modal').classList.add('active');\n    }\n\n    // Delete current entry\n    deleteCurrentEntry() {\n        if (!confirm('Tem certeza que deseja excluir esta entrada? Esta a√ß√£o n√£o pode ser desfeita.')) {\n            return;\n        }\n\n        const index = this.entries.findIndex(e => e.id === this.currentEditingId);\n        if (index !== -1) {\n            this.entries.splice(index, 1);\n            this.saveEntries();\n            this.renderEntries();\n            this.hideModal('view-modal');\n            this.showMessage('Entrada exclu√≠da com sucesso!', 'success');\n        }\n    }\n\n    // Show message to user\n    showMessage(text, type = 'info') {\n        const messageContainer = document.getElementById('message-container');\n        const message = document.createElement('div');\n        message.className = `message ${type}`;\n        message.textContent = text;\n\n        messageContainer.appendChild(message);\n\n        // Auto remove message after 5 seconds\n        setTimeout(() => {\n            if (message.parentNode) {\n                message.parentNode.removeChild(message);\n            }\n        }, 5000);\n    }\n\n    // Logout user\n    logout() {\n        if (confirm('Tem certeza que deseja sair?')) {\n            this.masterPassword = null;\n            this.entries = [];\n            this.currentEditingId = null;\n            \n            // Reset forms and screens\n            document.getElementById('main-screen').classList.remove('active');\n            document.getElementById('login-screen').classList.add('active');\n            \n            // Clear form fields\n            document.getElementById('master-password').value = '';\n            this.resetForms();\n            \n            this.showMessage('Logout realizado com sucesso!', 'info');\n        }\n    }\n}\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.app = new PixelVault();\n});\n\n// Handle file editing for file entries - special case where we need to handle optional file replacement\ndocument.addEventListener('DOMContentLoaded', () => {\n    const originalSaveFileEntry = PixelVault.prototype.saveFileEntry;\n    \n    PixelVault.prototype.saveFileEntry = async function() {\n        const fileInput = document.getElementById('file-input');\n        const file = fileInput.files[0];\n        \n        // If editing and no new file selected, keep the existing file\n        if (this.currentEditingId && !file) {\n            const existingEntry = this.getEntryById(this.currentEditingId);\n            const entry = {\n                id: this.currentEditingId,\n                type: 'file',\n                title: document.getElementById('file-title').value,\n                category: document.getElementById('file-category').value,\n                fileName: existingEntry.fileName,\n                fileType: existingEntry.fileType,\n                fileSize: existingEntry.fileSize,\n                fileData: existingEntry.fileData,\n                createdAt: existingEntry.createdAt,\n                updatedAt: new Date().toISOString()\n            };\n\n            this.saveEntry(entry);\n            this.showMessage('File updated successfully!', 'success');\n            return;\n        }\n        \n        // Otherwise, use the original method\n        return originalSaveFileEntry.call(this);\n    };\n});\n","size_bytes":36329},"style.css":{"content":"/* Pixel Art Retro Styling */\n:root {\n    --primary-color: #00ff00;\n    --secondary-color: #ffff00;\n    --danger-color: #ff0000;\n    --warning-color: #ff8800;\n    --success-color: #00cc00;\n    --background-color: #1a1a2e;\n    --surface-color: #16213e;\n    --text-color: #ffffff;\n    --border-color: #0f3460;\n    --shadow-color: #0a0a0a;\n}\n\n/* Light Theme */\n[data-theme=\"light\"] {\n    --primary-color: #008800;\n    --secondary-color: #cc8800;\n    --danger-color: #cc0000;\n    --warning-color: #ff6600;\n    --success-color: #006600;\n    --background-color: #f0f0f0;\n    --surface-color: #e0e0e0;\n    --text-color: #2a2a2a;\n    --border-color: #999999;\n    --shadow-color: #cccccc;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Press Start 2P', cursive;\n    background: var(--background-color);\n    color: var(--text-color);\n    font-size: 12px;\n    line-height: 1.4;\n    image-rendering: pixelated;\n    image-rendering: -moz-crisp-edges;\n    image-rendering: crisp-edges;\n    background-image: \n        linear-gradient(45deg, var(--surface-color) 25%, transparent 25%),\n        linear-gradient(-45deg, var(--surface-color) 25%, transparent 25%),\n        linear-gradient(45deg, transparent 75%, var(--surface-color) 75%),\n        linear-gradient(-45deg, transparent 75%, var(--surface-color) 75%);\n    background-size: 20px 20px;\n    background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n    min-height: 100vh;\n}\n\n[data-theme=\"light\"] body {\n    background-image: \n        linear-gradient(45deg, #d0d0d0 25%, transparent 25%),\n        linear-gradient(-45deg, #d0d0d0 25%, transparent 25%),\n        linear-gradient(45deg, transparent 75%, #d0d0d0 75%),\n        linear-gradient(-45deg, transparent 75%, #d0d0d0 75%);\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\n/* Header Styles */\n.header {\n    text-align: center;\n    margin-bottom: 40px;\n    padding: 20px;\n    border: 4px solid var(--primary-color);\n    background: var(--surface-color);\n    box-shadow: 4px 4px 0px var(--shadow-color);\n    position: relative;\n}\n\n.theme-toggle {\n    position: absolute;\n    top: 15px;\n    right: 15px;\n    padding: 8px 12px;\n    font-size: 14px;\n    min-width: 40px;\n}\n\n.title {\n    font-size: 24px;\n    color: var(--primary-color);\n    text-shadow: 2px 2px 0px var(--shadow-color);\n    margin-bottom: 10px;\n}\n\n.subtitle {\n    font-size: 10px;\n    color: var(--secondary-color);\n}\n\n/* Screen Management */\n.screen {\n    display: none;\n}\n\n.screen.active {\n    display: block;\n}\n\n/* Pixel Box Component */\n.pixel-box {\n    background: var(--surface-color);\n    border: 4px solid var(--border-color);\n    box-shadow: 4px 4px 0px var(--shadow-color);\n    padding: 20px;\n    margin: 10px 0;\n}\n\n/* Login Screen */\n.login-container {\n    max-width: 400px;\n    margin: 0 auto;\n    text-align: center;\n}\n\n.login-container h2 {\n    color: var(--primary-color);\n    margin-bottom: 20px;\n}\n\n/* Input Styles */\n.input-group {\n    margin-bottom: 15px;\n    text-align: left;\n}\n\n.input-group label {\n    display: block;\n    margin-bottom: 5px;\n    color: var(--text-color);\n    font-size: 10px;\n}\n\n.pixel-input, .pixel-textarea {\n    width: 100%;\n    padding: 8px;\n    border: 3px solid var(--border-color);\n    background: var(--background-color);\n    color: var(--text-color);\n    font-family: 'Press Start 2P', cursive;\n    font-size: 10px;\n    outline: none;\n    box-shadow: inset 2px 2px 0px var(--shadow-color);\n}\n\n.pixel-input:focus, .pixel-textarea:focus {\n    border-color: var(--primary-color);\n    box-shadow: inset 2px 2px 0px var(--shadow-color), 0 0 0 2px var(--primary-color);\n}\n\n.pixel-textarea {\n    resize: vertical;\n    min-height: 80px;\n}\n\n.password-input-group {\n    display: flex;\n    gap: 5px;\n}\n\n.password-input-group .pixel-input {\n    flex: 1;\n}\n\n.pixel-file-input {\n    width: 100%;\n    padding: 8px;\n    border: 3px solid var(--border-color);\n    background: var(--surface-color);\n    color: var(--text-color);\n    font-family: 'Press Start 2P', cursive;\n    font-size: 8px;\n}\n\n/* Button Styles */\n.pixel-button {\n    font-family: 'Press Start 2P', cursive;\n    font-size: 10px;\n    padding: 10px 15px;\n    border: 3px solid;\n    background: var(--surface-color);\n    color: var(--text-color);\n    cursor: pointer;\n    text-transform: uppercase;\n    transition: all 0.1s ease;\n    box-shadow: 3px 3px 0px var(--shadow-color);\n    margin: 5px;\n}\n\n.pixel-button:hover {\n    transform: translate(1px, 1px);\n    box-shadow: 2px 2px 0px var(--shadow-color);\n}\n\n.pixel-button:active {\n    transform: translate(3px, 3px);\n    box-shadow: none;\n}\n\n.pixel-button.primary {\n    border-color: var(--primary-color);\n    color: var(--primary-color);\n}\n\n.pixel-button.primary:hover {\n    background: var(--primary-color);\n    color: var(--background-color);\n}\n\n.pixel-button.secondary {\n    border-color: var(--secondary-color);\n    color: var(--secondary-color);\n}\n\n.pixel-button.secondary:hover {\n    background: var(--secondary-color);\n    color: var(--background-color);\n}\n\n.pixel-button.success {\n    border-color: var(--success-color);\n    color: var(--success-color);\n}\n\n.pixel-button.success:hover {\n    background: var(--success-color);\n    color: var(--background-color);\n}\n\n.pixel-button.warning {\n    border-color: var(--warning-color);\n    color: var(--warning-color);\n}\n\n.pixel-button.warning:hover {\n    background: var(--warning-color);\n    color: var(--background-color);\n}\n\n.pixel-button.danger {\n    border-color: var(--danger-color);\n    color: var(--danger-color);\n}\n\n.pixel-button.danger:hover {\n    background: var(--danger-color);\n    color: var(--text-color);\n}\n\n/* Navigation Bar */\n.nav-bar {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    margin-bottom: 20px;\n    padding: 15px;\n    background: var(--surface-color);\n    border: 3px solid var(--border-color);\n    box-shadow: 3px 3px 0px var(--shadow-color);\n}\n\n/* Filter Bar */\n.filter-bar {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    margin-bottom: 30px;\n    padding: 10px;\n    background: var(--background-color);\n    border: 2px solid var(--border-color);\n    box-shadow: 2px 2px 0px var(--shadow-color);\n}\n\n.filter-label {\n    margin-right: 15px;\n    color: var(--text-color);\n    font-size: 10px;\n}\n\n.filter-button {\n    margin: 2px;\n    padding: 6px 12px;\n    font-size: 8px;\n    opacity: 0.7;\n    transition: opacity 0.2s ease;\n}\n\n.filter-button.active {\n    opacity: 1;\n    transform: translate(1px, 1px);\n    box-shadow: 1px 1px 0px var(--shadow-color);\n}\n\n.copy-button {\n    font-size: 8px;\n    padding: 4px 8px;\n    margin-left: 5px;\n    min-width: auto;\n}\n\n.password-visibility-toggle {\n    cursor: pointer;\n    padding: 4px 8px;\n    margin-left: 5px;\n    font-size: 12px;\n}\n\n/* Content Area */\n.content-area {\n    min-height: 400px;\n}\n\n.entries-list {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n    gap: 20px;\n}\n\n.empty-state {\n    grid-column: 1 / -1;\n    text-align: center;\n    padding: 60px 20px;\n    color: var(--secondary-color);\n    border: 2px dashed var(--border-color);\n}\n\n/* Entry Cards */\n.entry-card {\n    background: var(--surface-color);\n    border: 3px solid var(--border-color);\n    box-shadow: 3px 3px 0px var(--shadow-color);\n    padding: 15px;\n    cursor: pointer;\n    transition: all 0.1s ease;\n}\n\n.entry-card:hover {\n    transform: translate(1px, 1px);\n    box-shadow: 2px 2px 0px var(--shadow-color);\n}\n\n.entry-card.password {\n    border-color: var(--primary-color);\n}\n\n.entry-card.note {\n    border-color: var(--success-color);\n}\n\n.entry-card.file {\n    border-color: var(--warning-color);\n}\n\n.entry-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 10px;\n}\n\n.entry-type {\n    font-size: 8px;\n    padding: 3px 6px;\n    border: 2px solid;\n    background: var(--background-color);\n}\n\n.entry-type.password {\n    border-color: var(--primary-color);\n    color: var(--primary-color);\n}\n\n.entry-type.note {\n    border-color: var(--success-color);\n    color: var(--success-color);\n}\n\n.entry-type.file {\n    border-color: var(--warning-color);\n    color: var(--warning-color);\n}\n\n.entry-title {\n    font-size: 12px;\n    color: var(--text-color);\n    margin-bottom: 5px;\n}\n\n.entry-preview {\n    font-size: 8px;\n    color: var(--secondary-color);\n    opacity: 0.8;\n}\n\n/* Modal Styles */\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.8);\n}\n\n.modal.active {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.modal-content {\n    max-width: 600px;\n    width: 90%;\n    max-height: 80vh;\n    overflow-y: auto;\n}\n\n.media-modal-content {\n    max-width: 90%;\n    max-height: 90%;\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 20px;\n    padding-bottom: 15px;\n    border-bottom: 2px solid var(--border-color);\n}\n\n.modal-header h3 {\n    color: var(--primary-color);\n    font-size: 14px;\n}\n\n.modal-actions {\n    display: flex;\n    gap: 5px;\n}\n\n.entry-form {\n    max-width: none;\n}\n\n.entry-form.hidden {\n    display: none;\n}\n\n/* File Preview */\n.file-preview {\n    margin: 10px 0;\n    text-align: center;\n}\n\n.file-preview img, .file-preview video {\n    max-width: 100%;\n    max-height: 200px;\n    border: 2px solid var(--border-color);\n    image-rendering: pixelated;\n}\n\n/* Media Viewer */\n.media-body {\n    text-align: center;\n}\n\n#media-container img, #media-container video {\n    max-width: 100%;\n    max-height: 70vh;\n    border: 3px solid var(--primary-color);\n    image-rendering: pixelated;\n}\n\n/* View Modal Content */\n.entry-detail {\n    margin-bottom: 15px;\n    padding: 10px;\n    background: var(--background-color);\n    border: 2px solid var(--border-color);\n}\n\n.entry-detail-label {\n    font-size: 8px;\n    color: var(--secondary-color);\n    margin-bottom: 5px;\n}\n\n.entry-detail-value {\n    font-size: 10px;\n    color: var(--text-color);\n    word-break: break-all;\n}\n\n.entry-detail-value.password {\n    font-family: monospace;\n    background: var(--surface-color);\n    padding: 5px;\n    border: 1px solid var(--border-color);\n}\n\n/* Messages */\n.message-container {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    z-index: 2000;\n}\n\n.message {\n    padding: 10px 15px;\n    margin-bottom: 10px;\n    border: 3px solid;\n    background: var(--surface-color);\n    font-family: 'Press Start 2P', cursive;\n    font-size: 8px;\n    box-shadow: 3px 3px 0px var(--shadow-color);\n    animation: slideIn 0.3s ease;\n}\n\n.message.success {\n    border-color: var(--success-color);\n    color: var(--success-color);\n}\n\n.message.error {\n    border-color: var(--danger-color);\n    color: var(--danger-color);\n}\n\n.message.info {\n    border-color: var(--primary-color);\n    color: var(--primary-color);\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* Hidden utility */\n.hidden {\n    display: none !important;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    body {\n        font-size: 10px;\n    }\n    \n    .title {\n        font-size: 16px;\n    }\n    \n    .subtitle {\n        font-size: 8px;\n    }\n    \n    .theme-toggle {\n        top: 10px;\n        right: 10px;\n        padding: 6px 10px;\n        font-size: 12px;\n    }\n    \n    .entries-list {\n        grid-template-columns: 1fr;\n        gap: 15px;\n    }\n    \n    .nav-bar {\n        flex-direction: column;\n        gap: 10px;\n        padding: 10px;\n    }\n    \n    .nav-bar .pixel-button {\n        width: 100%;\n        max-width: 200px;\n    }\n    \n    .filter-bar {\n        flex-direction: column;\n        gap: 10px;\n        padding: 15px;\n    }\n    \n    .filter-label {\n        margin-bottom: 5px;\n    }\n    \n    .filter-button {\n        margin: 2px;\n        padding: 8px 16px;\n        font-size: 9px;\n        flex: 1;\n        min-width: 80px;\n    }\n    \n    .pixel-button {\n        font-size: 9px;\n        padding: 10px 15px;\n    }\n    \n    .modal-content {\n        width: 95%;\n        margin: 10px;\n        max-height: 85vh;\n    }\n    \n    .modal-actions {\n        flex-direction: column;\n        gap: 8px;\n    }\n    \n    .modal-actions .pixel-button {\n        width: 100%;\n    }\n    \n    .password-input-group {\n        flex-direction: column;\n        gap: 8px;\n    }\n    \n    .password-input-group .pixel-button {\n        width: 100%;\n    }\n    \n    .copy-button {\n        font-size: 10px;\n        padding: 6px 10px;\n        margin-left: 8px;\n        margin-top: 5px;\n        display: inline-block;\n    }\n    \n    .entry-detail-value {\n        word-break: break-word;\n        display: flex;\n        flex-direction: column;\n        gap: 5px;\n    }\n    \n    .entry-card {\n        padding: 12px;\n    }\n    \n    .entry-header {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 5px;\n    }\n}\n\n@media (max-width: 480px) {\n    .container {\n        padding: 8px;\n    }\n    \n    .pixel-box {\n        padding: 12px;\n    }\n    \n    .header {\n        padding: 15px;\n        margin-bottom: 20px;\n    }\n    \n    .title {\n        font-size: 14px;\n    }\n    \n    .subtitle {\n        font-size: 7px;\n    }\n    \n    .theme-toggle {\n        top: 8px;\n        right: 8px;\n        padding: 5px 8px;\n        font-size: 10px;\n    }\n    \n    .pixel-input, .pixel-textarea {\n        font-size: 9px;\n        padding: 10px;\n    }\n    \n    .pixel-button {\n        font-size: 8px;\n        padding: 8px 12px;\n    }\n    \n    .filter-bar {\n        padding: 10px;\n    }\n    \n    .filter-button {\n        padding: 6px 12px;\n        font-size: 8px;\n        min-width: 70px;\n    }\n    \n    .nav-bar {\n        padding: 8px;\n    }\n    \n    .modal-header h3 {\n        font-size: 12px;\n    }\n    \n    .entry-detail-label {\n        font-size: 7px;\n    }\n    \n    .entry-detail-value {\n        font-size: 9px;\n    }\n    \n    .copy-button {\n        font-size: 8px;\n        padding: 4px 8px;\n    }\n    \n    .message {\n        font-size: 7px;\n        padding: 8px 12px;\n    }\n}\n","size_bytes":14204}}}